{"version":3,"sources":["../src/index.js"],"names":["type","Object","prototype","toString","call","t","replace","toLowerCase","MatrixCounter","base","initialState","equal","forEach","i","__base","length","__state","reset","hasNext","peek","concat","Array","fill"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,OAAO,SAAPA,IAAO;AAAA,SAAKC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BC,CAA/B,EAAkCC,OAAlC,CAA0C,UAA1C,EAAsD,EAAtD,EAA0DA,OAA1D,CAAkE,GAAlE,EAAuE,EAAvE,EAA2EC,WAA3E,EAAL;AAAA,CAAb;;IAEqBC,a;AACnB,yBAAaC,IAAb,EAAmBC,YAAnB,EAAiC;AAAA;;AAC/B,qBAAOC,KAAP,CAAaX,KAAKS,IAAL,CAAb,EAAyB,OAAzB,qHAEgDT,KAAKS,IAAL,CAFhD;AAIAA,SAAKG,OAAL,CAAa;AAAA,aAAK,sBAAOC,IAAI,CAAX,gLAAL;AAAA,KAAb;AAKA,SAAKC,MAAL,GAAcL,IAAd;AACA,QAAIT,KAAKU,YAAL,MAAuB,OAA3B,EAAoC;AAClC,uBAAOC,KAAP,CAAaF,KAAKM,MAAlB,EAA0BL,aAAaK,MAAvC,uLAG+CN,KAAKM,MAHpD,oBAGyEL,aAAaK,MAHtF;AAKA,WAAKC,OAAL,GAAeN,YAAf;AACD,KAPD,MAOO;AACL,WAAKO,KAAL;AACD;AACF;;;;8BACU;AACT,aAAO,KAAKD,OAAL,CAAa,CAAb,IAAkB,KAAKF,MAAL,CAAY,CAAZ,CAAzB;AACD;;;2BACO;AACN;AACA,UAAI,CAAC,KAAKI,OAAL,EAAL,EAAqB,OAAO,IAAP;AACrB;AACA,WAAKF,OAAL,CAAa,KAAKA,OAAL,CAAaD,MAAb,GAAsB,CAAnC,IAAwC,KAAKC,OAAL,CAAa,KAAKA,OAAL,CAAaD,MAAb,GAAsB,CAAnC,IAAwC,CAAhF;AACA;AACA,WAAK,IAAIF,IAAI,KAAKG,OAAL,CAAaD,MAAb,GAAsB,CAAnC,EAAsCF,KAAK,CAA3C,EAA8CA,GAA9C,EAAmD;AACjD,YAAI,KAAKG,OAAL,CAAaH,CAAb,MAAoB,KAAKC,MAAL,CAAYD,CAAZ,CAAxB,EAAwC;AACtC,eAAKG,OAAL,CAAaH,IAAI,CAAjB,IADsC,CACd;AACxB,eAAKG,OAAL,CAAaH,CAAb,IAAkB,CAAlB,CAFsC,CAEjB;AACtB;AACF;AACD,aAAO,KAAKM,IAAL,EAAP;AACD;;;2BACO;AACN,aAAO,GAAGC,MAAH,CAAU,KAAKJ,OAAf,CAAP,CADM,CAC0B;AACjC;;;4BACQ;AACP,WAAKA,OAAL,GAAe,IAAIK,KAAJ,CAAU,KAAKP,MAAL,CAAYC,MAAtB,EAA8BO,IAA9B,CAAmC,CAAnC,CAAf;AACA,aAAO,KAAKH,IAAL,EAAP;AACD;;;;;;kBA9CkBX,a","file":"index.js","sourcesContent":["import assert from 'assert';\n\nconst type = t => Object.prototype.toString.call(t).replace('[object ', '').replace(']', '').toLowerCase();\n\nexport default class MatrixCounter {\n  constructor (base, initialState) {\n    assert.equal(type(base), 'array', `\n      MatrixCounter#constructor accepts first parameter \n      \"base\" of type array, got parameter of type ${type(base)}\n    `);\n    base.forEach(i => assert(i > 1, `\n      MatrixCounter#constructor accepts first parameter \n      \"base\" of type array containing numbers greater than 1,\n      got element less than or equal to 1.\n    `))\n    this.__base = base;\n    if (type(initialState) === 'array') {\n      assert.equal(base.length, initialState.length, `\n        MatrixCounter#constructor accepts second parameter\n        of type \"initialState\" of type array and equal length\n        to first parameter \"base\", but got lengths ${base.length} (base) and ${initialState.length} (initialState)\n      `);\n      this.__state = initialState;\n    } else {\n      this.reset();\n    }\n  }\n  hasNext () {\n    return this.__state[0] < this.__base[0];\n  }\n  next () {\n    // If we are at the end, signal\n    if (!this.hasNext()) return null;\n    // Increment index 0;\n    this.__state[this.__state.length - 1] = this.__state[this.__state.length - 1] + 1;\n    // Recalc state\n    for (var i = this.__state.length - 1; i >= 1; i--) {\n      if (this.__state[i] === this.__base[i]) {\n        this.__state[i - 1] ++; //carry next index\n        this.__state[i] = 0; //reset this index\n      }\n    }\n    return this.peek();\n  }\n  peek () {\n    return [].concat(this.__state); //keepin' it immutable\n  }\n  reset () {\n    this.__state = new Array(this.__base.length).fill(0);\n    return this.peek();\n  }\n}\n"]}